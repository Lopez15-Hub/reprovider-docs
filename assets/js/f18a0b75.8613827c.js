"use strict";(self.webpackChunkreprovider_docs=self.webpackChunkreprovider_docs||[]).push([[327],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var r=n(7294);function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){u(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,u=function(e,t){if(null==e)return{};var n,r,u={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(u[n]=e[n]);return u}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(u[n]=e[n])}return u}var o=r.createContext({}),c=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(o.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var n=e.components,u=e.mdxType,s=e.originalType,o=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),d=c(n),k=u,f=d["".concat(o,".").concat(k)]||d[k]||p[k]||s;return n?r.createElement(f,i(i({ref:t},l),{},{components:n})):r.createElement(f,i({ref:t},l))}));function f(e,t){var n=arguments,u=t&&t.mdxType;if("string"==typeof e||u){var s=n.length,i=new Array(s);i[0]=k;var a={};for(var o in t)hasOwnProperty.call(t,o)&&(a[o]=t[o]);a.originalType=e,a[d]="string"==typeof e?e:u,i[1]=a;for(var c=2;c<s;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}k.displayName="MDXCreateElement"},5251:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var r=n(7462),u=(n(7294),n(3905));const s={},i="Buildux Thunk",a={unversionedId:"buildux/buildux-thunk",id:"buildux/buildux-thunk",title:"Buildux Thunk",description:"Overview",source:"@site/docs/buildux/buildux-thunk.md",sourceDirName:"buildux",slug:"/buildux/buildux-thunk",permalink:"/reprovider-docs/docs/buildux/buildux-thunk",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/buildux/buildux-thunk.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Usage",permalink:"/reprovider-docs/docs/buildux/usage"},next:{title:"Service Injection",permalink:"/reprovider-docs/docs/buildux/service-injection"}},o={},c=[{value:"Overview",id:"overview",level:2},{value:"Creating a BuilduxThunk",id:"creating-a-builduxthunk",level:2}],l={toc:c},d="wrapper";function p(e){let{components:t,...n}=e;return(0,u.kt)(d,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,u.kt)("h1",{id:"buildux-thunk"},"Buildux Thunk"),(0,u.kt)("h2",{id:"overview"},"Overview"),(0,u.kt)("p",null,"Buildux provide a custom thunk for asincronus calls and it's an implementation of ",(0,u.kt)("a",{parentName:"p",href:"https://redux-toolkit.js.org/usage/usage-guide#async-requests-with-createasyncthunk"},"createAsyncThunk"),"."),(0,u.kt)("h2",{id:"creating-a-builduxthunk"},"Creating a BuilduxThunk"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-typescript"},'\nimport { builduxThunk } from "reprovider";\n\nbuilduxThunk<User[], void>({\n    description: "Get user from API",\n    reference: "/users",\n    action: async () => {\n      const usersService = context.consumer.get(UsersService);\n      const users = await usersService.getUsers();\n      return users;\n    },\n  }),\n')),(0,u.kt)("p",null,"For use the thunk we need register into thunkRegistry method that it's provided when we create the Buildux instance"),(0,u.kt)("p",null,"users.buildux.ts"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-typescript"},'const { context, thunksRegistry } = new Buildux<UsersState>({\n  name: "users",\n  services,\n  initialState: {\n    users: [],\n  },\n});\n//... Rest of code\n\n//Register a new thunk.\nthunksRegistry(context, (context) => [\n  builduxThunk<User[], void>({\n    description: "Get user from API",\n    reference: "/users",\n    action: async () => {\n      const usersService = context.consumer.get(UsersService);\n      const users = await usersService.getUsers();\n      return users;\n    },\n  }),\n]);\n')),(0,u.kt)("p",null,"also we can declare our thunks out of our buildux file and the pass the reference into thunksRegistry."),(0,u.kt)("p",null,"users-thunks.registry.ts"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-typescript"},'export const userThunksRegistry = <T>(context: BuilduxContext<T>) => [\n  builduxThunk<User[], void>({\n    description: "Get user from API",\n    reference: "/users",\n    action: async () => {\n      const usersService = context.consumer.get(UsersService);\n      const users = await usersService.getUsers();\n      return users;\n    },\n  }),\n];\n')),(0,u.kt)("p",null,"then we can import it into buildux file."),(0,u.kt)("p",null,"users.buildux.ts"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-typescript"},'const { context, thunksRegistry } = new Buildux<UsersState>({\n  name: "users",\n  services,\n  initialState: {\n    users: [],\n  },\n}).createReducers({\n  reducers: {\n    setUsers: (state, payload: PayloadAction<User[]>) => {\n      state.users = payload.payload;\n    },\n  },\n  extraReducers(builder: ActionReducerMapBuilder<UsersState>) {\n    builder.addCase(\n      context.thunks[0].fulfilled,\n      (state, { payload }: PayloadAction<User[]>) => {\n        if (payload) state.users = payload;\n        console.log(state.users);\n      }\n    );\n  },\n});\n\nthunksRegistry(context, userThunksRegistry);\n')))}p.isMDXComponent=!0}}]);