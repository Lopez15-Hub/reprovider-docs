"use strict";(self.webpackChunkreprovider_docs=self.webpackChunkreprovider_docs||[]).push([[651],{3905:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>v});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function a(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=n.createContext({}),l=function(e){var r=n.useContext(p),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},c=function(e){var r=l(e.components);return n.createElement(p.Provider,{value:r},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),d=l(t),m=o,v=d["".concat(p,".").concat(m)]||d[m]||u[m]||i;return t?n.createElement(v,s(s({ref:r},c),{},{components:t})):n.createElement(v,s({ref:r},c))}));function v(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=t.length,s=new Array(i);s[0]=m;var a={};for(var p in r)hasOwnProperty.call(r,p)&&(a[p]=r[p]);a.originalType=e,a[d]="string"==typeof e?e:o,s[1]=a;for(var l=2;l<i;l++)s[l]=t[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2257:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>p,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var n=t(7462),o=(t(7294),t(3905));const i={sidebar_position:1},s="Quickstart",a={unversionedId:"quickstart",id:"quickstart",title:"Quickstart",description:"Install",source:"@site/docs/quickstart.md",sourceDirName:".",slug:"/quickstart",permalink:"/reprovider-docs/es/docs/quickstart",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/quickstart.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/reprovider-docs/es/docs/overview"},next:{title:"Examples",permalink:"/reprovider-docs/es/docs/examples/"}},p={},l=[{value:"Install",id:"install",level:3},{value:"Using Reprovider",id:"using-reprovider",level:3},{value:"Say hello with useProvider",id:"say-hello-with-useprovider",level:3}],c={toc:l},d="wrapper";function u(e){let{components:r,...t}=e;return(0,o.kt)(d,(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"quickstart"},"Quickstart"),(0,o.kt)("h3",{id:"install"},"Install"),(0,o.kt)("p",null,"with npm:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-powershell"},"npm i reprovider\n")),(0,o.kt)("h3",{id:"using-reprovider"},"Using Reprovider"),(0,o.kt)("p",null,"First create the repository, it can contains the interacions with an A.P.I or Database."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},(0,o.kt)("strong",{parentName:"em"},"greets.repository.ts"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'export class GreetsRepository {\n  hello = () => "Hello ";\n  goodBay = () => "Goodbay ";\n}\n')),(0,o.kt)("p",null,"Now create the service and inject the repository into constructor."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},(0,o.kt)("strong",{parentName:"em"},"greets.service.ts"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { GreetsRepository } from "../repository/greets.repository";\n\nexport class GreetsService {\n  constructor(private readonly repository: GreetsRepository) {}\n  sayHello = (): string => `${this.repository.hello()} World From Reprovider`;\n  sayGoodbye = (): string =>\n    `${this.repository.goodBay()} World From Reprovider`;\n}\n')),(0,o.kt)("p",null,"Its time to create the registry file."),(0,o.kt)("p",null,"It contains all services with its dependencies that will register into ServiceProvider"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},(0,o.kt)("strong",{parentName:"em"},"registry.ts"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Service } from "reprovider";\nimport { GreetsService } from "./services/greets.service";\nimport { GreetsRepository } from "./repository/greets.repository";\n\nexport const services: Service[] = [\n  {\n    description: "Service for greeting people",\n    service: GreetsService,\n    dependencies: [GreetsRepository],\n  },\n];\n')),(0,o.kt)("p",null,"Once do you configure the services and declared into registry file. FInally we can inject the services into the app."),(0,o.kt)("p",null,"For that, add the ServiceProvider at the top of the app."),(0,o.kt)("p",null,"The service provided will be responsible of create the context that we will using later calling the useProvider hook."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},(0,o.kt)("strong",{parentName:"em"},"app.tsx"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { ServiceProvider } from "reprovider";\nimport SayHello from "./components/say-hello.component";\nimport { services } from "./core/registry";\n\nconst App = (): JSX.Element => {\n  return (\n    <ServiceProvider services={services}>\n      <SayHello />\n    </ServiceProvider>\n  );\n};\n\nexport default App;\n')),(0,o.kt)("h3",{id:"say-hello-with-useprovider"},"Say hello with useProvider"),(0,o.kt)("p",null,"Finally, just import the useProvider, pass the reference of Service that you wan use and desestructure the provider."),(0,o.kt)("p",null,"Optional: You can rename the provider as you want. This is recommended for understand the code, better."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},(0,o.kt)("strong",{parentName:"em"},"say-hello.component.tsx"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { useProvider } from "reprovider";\nimport { GreetsService } from "../core/services/greets.service";\n\n/**\n * Show a simple hello world\n *\n */\nconst SayHello = () => {\n  /**\n   * Optional: Also we can rename the provider or use the standard reference.\n   * Is recommended rename the provider for understand the code better\n   */\n  const { provider: greetsService } = useProvider(GreetsService);\n\n  return (\n    <div>\n      <h1>{greetsService.sayHello()}</h1>\n    </div>\n  );\n};\n\nexport default SayHello;\n')))}u.isMDXComponent=!0}}]);